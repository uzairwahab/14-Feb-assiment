1. what is multithreading in python? why is it used? Name the module used to handle threads in python
Ans. Multithreading - Multithreading is a threading technique in Python programming to run multiple threads concurrently by rapidly switching between threads with a CPU help (called context switching).
threading module use to handle threads in python.
Multithreading is particularly useful in applications where there are multiple I/O operations, such as reading from or writing to a database,
downloading files from the internet, or processing input/output from a user. In such scenarios, multithreading can help to keep the program
responsive and prevent it from becoming blocked while waiting for an I/O operation to complete.

However, it is important to note that multithreading in Python may not always result in significant performance improvements, depending on the nature of the
program and the tasks being performed. Additionally, multithreading can also introduce issues such as race conditions and deadlocks, which must be carefully
managed in order to ensure correct program behavior.







2. why threading module used? rite the use of the following functions
 activeCount()
 currentThread()
 enumerate()
 
 Ans.The threading module in Python is used for creating and managing threads. Threads allow a program to run multiple tasks concurrently, 
 which can be particularly useful when dealing with I/O-bound operations or other blocking tasks.

Here are the descriptions of the functions you asked for:

activeCount(): This function returns the number of Thread objects that are active in the current thread's ThreadGroup. An active thread is any thread that
has been started but has not yet been joined.

currentThread(): This function returns a reference to the current Thread object. The current Thread object is the thread that is executing this function.

enumerate(): This function returns a list of all Thread objects that are active in the current thread's ThreadGroup. An active thread is any thread that has
been started but has not yet been joined. This function is particularly useful for debugging and monitoring purposes, as it allows you to inspect the state of 
all threads in the current ThreadGroup.
 
3. Explain the following functions
  run()
  ans. import threading
import time

class MyThread(threading.Thread):
    def run(self):
        print(f"{self.getName()} starting")
        time.sleep(1)
        print(f"{self.getName()} finishing")

threads = []
for i in range(5):
    t = MyThread()
    t.start()
    threads.append(t)

 start()
 ans. 
 import threading
import time

def test2 (id):
    print('prog start %d'%id)
    time.sleep(1)
thread2 = [threading.Thread(target= test2 , args= (i,)) for i in range(11)]
for i in thread2:
    i.start()
for i in thread2:
    i.start()

 
 
 join()
 ans.import threading
import time

def task():
    print(f"{threading.current_thread().name} starting")
    time.sleep(1)
    print(f"{threading.current_thread().name} finishing")

threads = []
for i in range(5):
    t = threading.Thread(target=task)
    t.start()
    threads.append(t)

for t in threads:
    t.join()

print("All threads have finished")

 
 isAlive()
 Ans. The isAlive() function is likely associated with a multi-threaded program and is used to check whether a particular thread is currently running or not. In programming, a thread is a unit of execution that runs independently of the main program and other threads.

When a thread is started, it enters the "running" state and begins executing its code. However, at some point, it may complete its task or encounter an error and terminate. In that case, it transitions to a "dead" state and cannot be restarted.

The isAlive() function returns a boolean value indicating whether a thread is in the "running" state or not. If the thread is running, it returns True, and if it is not running (either because it has completed its task or has encountered an error), it returns False.

This function can be useful for coordinating and synchronizing the execution of multiple threads in a program. For example, a program might wait for a particular thread to complete its task before continuing to execute other parts of the code. By using the isAlive() function, the program can check whether the thread is still running and decide whether to wait or continue execution.



4. write a python program to create two threads. Thread one must print the list of squares and thread
two must print the list of cubes
ans. import threading

def print_squares(n):
    for i in range(1, n+1):
        print(i*i)

def print_cubes(n):
    for i in range(1, n+1):
        print(i*i*i)

# create the first thread to print squares
thread1 = threading.Thread(target=print_squares, args=(10,))

# create the second thread to print cubes
thread2 = threading.Thread(target=print_cubes, args=(10,))

# start both threads
thread1.start()
thread2.start()

# wait for both threads to finish
thread1.join()
thread2.join()



5. State advantages and disadvantages of multithreading
ans. Following are some of the common advantages of multithreading:

Enhanced performance by decreased development time
Simplified and streamlined program coding
Improvised GUI responsiveness
Simultaneous and parallelized occurrence of tasks
Better use of cache storage by utilization of resources
Decreased cost of maintenance
Better use of CPU resource

Multithreading does not only provide you with benefits, it has its disadvantages too. Let us go through some common disadvantages:

Complex debugging and testing processes
Overhead switching of context
Increased potential for deadlock occurrence
Increased difficulty level in writing a program
Unpredictable results




6. Explain deadlocks and race conditions.
ans. A deadlock is a situation in which two or more threads or processes are blocked, waiting for each other to release resources they need in order to continue executing.
In other words, each thread or process is holding a resource that another thread or process needs in order to make progress. Deadlocks can occur when resources are not properly managed, 
or when there is a circular dependency among the resources that are being used.

A race condition is a situation in which the outcome of a program depends on the relative timing or ordering of events that are not under the control of the program. 
Specifically, a race condition can occur when two or more threads or processes access a shared resource in an unpredictable order, 
leading to inconsistent or incorrect behavior. Race conditions can occur when different parts of a program make assumptions about the state of shared resources that are not synchronized,
or when there are not enough synchronization mechanisms to ensure that access to shared resources is properly coordinated.

In summary, deadlocks and race conditions are both synchronization problems that can occur in concurrent programs.
Deadlocks occur when two or more threads or processes are blocked waiting for each other to release resources they need, while race conditions occur when the
outcome of a program depends on the relative timing or ordering of events that are not under the control of the program.

